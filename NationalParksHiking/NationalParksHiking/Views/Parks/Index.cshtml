@model NationalParksHiking.Models.ParkFilterViewModel

@{
    ViewBag.Title = "Index";
}
<div class="container-fluid">

    <h2>US National Parks</h2>
</div>
@{
    // Create an empty list for the marker values to add into
    List<NationalParksHiking.Models.ParkMarkers> parkMarkers = new List<NationalParksHiking.Models.ParkMarkers>();
}
<div id="map">
</div>
<div class="clearfix"></div>

@using (Html.BeginForm())
{
    <div class="container-fluid">
        <div class="flex-container">
            <div class="panel-body">
                <div class="form-horizontal">
                    <h4>Park</h4>
                    <hr />

                    <div class="form-group">
                        <div class="flex-container">
                            <div class="state-filter-box">
                                @Html.LabelFor(model => model.SelectedState)
                            </div>
                            <div class="state-filter-box">
                                @Html.DropDownListFor(model => model.SelectedState, Model.States, "Please Select State")
                            </div>
                            <div class="state-filter-box">
                                <input type="submit" value="Filter" class="btn btn-default" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Parks[0].ParkName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Parks[0].ParkState)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Parks[0].ParkLat)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Parks[0].ParkLng)
        </th>
        <th></th>
        @*<th></th>*@
    </tr>

    @foreach (var item in Model.Parks)
    {
        // Add Markers
        NationalParksHiking.Models.ParkMarkers parkMarker = new NationalParksHiking.Models.ParkMarkers();
        //Assign required parameters
        parkMarker.ParkLatitude = item.ParkLat;
        parkMarker.ParkLongitude = item.ParkLng;
        //Actually add all three values together into the parkMarker object
        parkMarkers.Add(parkMarker);
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.ParkName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ParkState)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ParkLat)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ParkLng)
            </td>
            <td>
                @Html.ActionLink("Details", "Details", new { id = item.ParkId })
            </td>
            @*<td>
                    @Html.ActionLink("Add to Wishlist", "AddParkToWishlist")
                </td>*@
        </tr>

    }

</table>

<script>
    var map;
    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 39.8283, lng: -98.5795 }, // General Middle of the US
            zoom: 4
        });

        //Loop through each marker and instantiate the actual marker call from Google Maps API
        @foreach (var marker in parkMarkers)
        {
            // <Text> needed because it can't be used in tables
            <text>
            marker = new google.maps.Marker({
                position: { lat: @marker.ParkLatitude, lng: @marker.ParkLongitude },
            map: map
            });
            </text>
        }

    }

    @*$(document).ready(function() {
        $.ajax({
            url: '@Url.Action("GetState", "Parks")',
            type: 'POST',
            dataType: 'json',
            success: function (data) {
                $(data).each(function (index, item) {
                    $('#ddlState').append(`<option value="${item.StateId}">${item.StateName}</option>`);
                });
            }
        });
    });*@
                </script>

                <script src="@ViewBag.APIKey" async defer type="text/javascript"></script>

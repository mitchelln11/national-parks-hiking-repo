@model IEnumerable<NationalParksHiking.Models.Park>

@{
    ViewBag.Title = "Index";
}
<div class="container-fluid">
    <h2>US National Parks</h2>
</div>
@{
    // Create an empty list for the marker values to add into
    List<NationalParksHiking.Models.ParkMarkers> parkMarkers = new List<NationalParksHiking.Models.ParkMarkers>();
}
<div id="map">
</div>
<div class="clearfix"></div>

<div class="container-fluid">
    <div class="flex-container">
        <div class="panel-body">
            @*@using (Html.BeginForm("Park", "Park", FormMethod.Post, new { role = "form" }))
            {*@

                @* State selection dropdown *@
                @*<div class="form-group">*@
                    @*Html.LabelFor(m => m.States)
                    @*Html.DropDownListFor(m => m.States, // 1. Store selected value in Model.State;
                                                         // when page is rendered after postback,
                                                         // take selected value from Model.State.

                // 2. Take list of values from Model.States
                //Model.States,

                // 3. Text for the first 'default' option
                //"- Please select a state -",

                //4. A class name to assign to <select> tag
                //new { @class = "form-control" })
                </div>

                <button type="submit" class="btn btn-primary">Sign up</button>
            @*}*@
        </div>
    </div>
</div>

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.ParkName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ParkState)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ParkLat)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ParkLng)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        // Add Markers
        NationalParksHiking.Models.ParkMarkers parkMarker = new NationalParksHiking.Models.ParkMarkers();
        //Assign required parameters
        parkMarker.ParkLatitude = item.ParkLat;
        parkMarker.ParkLongitude = item.ParkLng;
        //Actually add all three values together into the parkMarker object
        parkMarkers.Add(parkMarker);
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.ParkName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ParkState)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ParkLat)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ParkLng)
            </td>
            <td>
                @Html.ActionLink("Details", "Details", new { id = item.ParkId })
            </td>
        </tr>
        
    }

</table>

<script>
    var map;
    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 39.8283, lng: -98.5795 }, // General Middle of the US
            zoom: 4
        });

        //Loop through each marker and instantiate the actual marker call from Google Maps API
        @foreach (var marker in parkMarkers)
        {
            // <Text> needed because it can't be used in tables
            <text>
            marker = new google.maps.Marker({
                position: { lat: @marker.ParkLatitude, lng: @marker.ParkLongitude },
            map: map
            });
            </text>
        }
        
    }
</script>

<script src="@ViewBag.APIKey" async defer type="text/javascript"></script>
